package solution.hashtable;

/**
 * @author By RuiCUI
 * 2018-08-02
 * Easy
 * Question 389:Find the Difference.
 * Given two strings s and t which consist of only lowercase letters.
 * String t is generated by random shuffling string s and then add one more letter at a random position.
 * Find the letter that was added in t.
 * Example:
 * Input:
 * s = "abcd"
 * t = "abcde"
 * Output:
 * e
 * Explanation:
 * 'e' is the letter that was added.
 */
public class FindTheDifference {

	/**
	 * 我自己写的方法
	 * 时间复杂度：O(n) 
	 * 空间复杂度：O(n)
	 * @param s
	 * @param t
	 * @return
	 */
	public static char findTheDifference(String s, String t) {
		int[] ch = new int[26];
		for(int i=0;i<s.length();i++){
			ch[s.charAt(i)-'a']++;
		}
		for(int i=0;i<t.length();i++){
			ch[t.charAt(i)-'a']--;
		}
		for(int i=0;i<26;i++){
			if(ch[i]!=0){
				return (char)(i+'a');
			}
		}
		return (char)(ch[0]+'a');
    }
	
	/**
	 * 官网没有solution,这是其他人的答案
	 * 时间复杂度：O(n) 
	 * 空间复杂度：O(n)
	 * @param s
	 * @param t
	 * @return
	 */
	public char findTheDifference1(String s, String t) {
		char c = 0;
		for (int i = 0; i < s.length(); ++i) {
			c ^= s.charAt(i);
		}
		for (int i = 0; i < t.length(); ++i) {
			c ^= t.charAt(i);
		}
		return c;
	}
	public char findTheDifference2(String s, String t) {
		int n = t.length();
		char c = t.charAt(n - 1);
		for (int i = 0; i < n - 1; ++i) {
			c ^= s.charAt(i);
			c ^= t.charAt(i);
		}
		return c;
	}
	
	/**
	 * 官网没有solution,这是其他人的答案，很巧妙
	 * 时间复杂度：O(n) 
	 * 空间复杂度：O(n)
	 * @param s
	 * @param t
	 * @return
	 */
	public char findTheDifference3(String s, String t) {
        int charCode = t.charAt(s.length());
        // Iterate through both strings and char codes
        for (int i = 0; i < s.length(); ++i) {
              charCode -= (int)s.charAt(i);
              charCode += (int)t.charAt(i); 
        }
        return (char)charCode;
    }
	
	/**
	 * 官网没有solution,这是其他人的答案,跟我的思路一样
	 * 时间复杂度：O(n) 
	 * 空间复杂度：O(n)
	 * @param s
	 * @param t
	 * @return
	 */
	public char findTheDifference4(String s, String t) {
		int[] alpha = new int[26];
	    for (char c : s.toCharArray())
	        alpha[ c - 'a' ]++;
	    for (char c : t.toCharArray()) {
	       //could do decrement first, then check but yeah
	        if (--alpha[c - 'a'] < 0)
	            return c;
	    }
	    return 0;
	}
	
	public static void main(String[] args) {
		String s = "abcd";
		String t = "abcde";
		System.out.println(findTheDifference(s,t));
	}

}
